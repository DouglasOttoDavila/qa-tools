from flask import Blueprint, jsonify, request
from config.configuration import API_PREFIX
from services.gemini_sdk import get_gemini_response
from helpers.general_helpers import replace_placeholders, get_dynamic_values

api = Blueprint("api", __name__)

@api.route(API_PREFIX + "process_requirements", methods=["POST"])
def process_requirements():
    data = request.json
    content = data.get("content")
    json_schema = get_dynamic_values("/ai_context", "JSON_SCHEMA", "dev")
    prompt = get_dynamic_values("/ai_context", "ANALYSIS_PROMPT", "dev")
    updated_prompt = replace_placeholders(prompt, ["[[USER_STORY]]","[[JSON_SCHEMA]]"], [content,json_schema])
    print("\n\nPrompt:\n", updated_prompt)
    
    story_analysis = get_gemini_response(updated_prompt)

    # Static payload for testing
    #story_analysis = {'user_story': 'Feature: User Profile Update\n\n  As a registered user,\n  I want to update my profile information,\n  So that my profile reflects my current details.\n\n  Scenario: Update basic profile information successfully\n\n    Given I am logged in as a user with username "john.doe"\n    And I am on the "Profile" page\n    When I enter "John A. Doe" in the "Full Name" field\n    And I enter "john.a.doe@example.com" in the "Email" field\n    And I select "Male" from the "Gender" dropdown\n    And I click the "Save Changes" button\n    Then I should see a success message "Profile updated successfully"\n    And my "Full Name" should be displayed as "John A. Doe"\n    And my "Email" should be displayed as "john.a.doe@example.com"\n    And my "Gender" should be displayed as "Male"\n\n    Examples:\n      | Full Name      | Email                  | Gender |\n      | John A. Doe    | john.a.doe@example.com | Male   |', 'evaluation': {'clarity': {'score': 4, 'feedback': "The story is generally clear and easy to understand. The 'As a...I want...So that...' format is well-used. However, it could benefit from being more specific about what constitutes 'profile information'."}, 'completeness': {'score': 3, 'feedback': 'The story provides a basic scenario, but it lacks details about error handling (e.g., invalid email format), edge cases (e.g., exceeding character limits), and other profile fields that might exist (e.g., phone number, address).  It is missing definition of done.'}, 'testability': {'score': 4, 'feedback': "The scenario is reasonably testable due to the specific inputs and expected outputs.  The Gherkin format enhances testability.  However, testing negative scenarios (e.g., invalid input) is not addressed. It's also assuming the existence of a profile page which must be present for the scenario to be testable."}, 'feasibility': {'score': 5, 'feedback': 'Updating profile information is a standard feature and is highly feasible.'}, 'relevance': {'score': 5, 'feedback': 'Allowing users to update their profile information is a core requirement for most applications, making this story highly relevant.'}, 'acceptance_criteria': {'score': 3, 'feedback': "The 'Then' statements act as basic acceptance criteria. However, they are limited to the happy path. More comprehensive acceptance criteria should include validation rules, error messages for invalid input, and possibly performance considerations. The example table is not really serving a valuable purpose here, could be removed."}}, 'overall_score': 3.83, 'total_score': 23, 'summary': "The user story is a good starting point but needs improvement in completeness and acceptance criteria. It clearly defines the 'what' and 'why' but lacks details regarding error handling, validation, and other possible profile fields. Adding more scenarios (e.g., invalid email format, password reset) and clarifying acceptance criteria would significantly enhance the story. The given example table doesn't add real value and could be removed.", 'suggested_user_story': '**Enhanced User Story:**\n\nAs a registered user, I want to update my profile information, so that my profile accurately reflects my current details and preferences, ensuring a personalized and up-to-date experience.\n\n**Scenario:** Update basic profile information successfully\n\nGiven I am logged in as a user with username "john.doe"\nAnd I am on the "Profile" page\nWhen I enter "John A. Doe" in the "Full Name" field\nAnd I enter "john.a.doe@example.com" in the "Email" field\nAnd I select "Male" from the "Gender" dropdown\nAnd I click the "Save Changes" button\nThen I should see a success message "Profile updated successfully"\nAnd my "Full Name" should be displayed as "John A. Doe"\nAnd my "Email" should be displayed as "john.a.doe@example.com"\nAnd my "Gender" should be displayed as "Male"\n\n**Scenario:** Attempt to update profile with invalid email format\n\nGiven I am logged in as a user with username "john.doe"\nAnd I am on the "Profile" page\nWhen I enter "invalid-email" in the "Email" field\nAnd I click the "Save Changes" button\nThen I should see an error message "Please enter a valid email address."\nAnd the "Save Changes" button remains enabled\n\n**Scenario:** Verify character limits on Full Name field\n\nGiven I am logged in as a user with username "john.doe"\nAnd I am on the "Profile" page\nWhen I enter a string of 51 characters in the "Full Name" field\nThen I should see an error message "Full Name cannot exceed 50 characters."\nAnd the "Save Changes" button remains disabled\n\n**Acceptance Criteria:**\n\n*   **Successful Update:** When valid information is entered for all editable fields (Full Name, Email, Gender) and the "Save Changes" button is clicked, a success message "Profile updated successfully" is displayed, and the updated information is reflected on the profile page.\n*   **Email Validation:** The email field must validate the email format. If an invalid email format is entered, an appropriate error message (e.g., "Please enter a valid email address.") is displayed, and the profile update is prevented.\n*   **Character Limits:** The "Full Name" field must enforce a character limit (e.g., 50 characters). If the limit is exceeded, an error message (e.g., "Full Name cannot exceed 50 characters.") is displayed, and the profile update is prevented.\n*   **Persistence:** Updated profile information should be persisted in the database and remain consistent across sessions.\n*   **Required Fields:** Full Name, Email and Gender are required. An error message appears when the user tries to save the profile without entering these fields\n*   **Definition of Done:**\n    *   All acceptance criteria are met.\n    *   Code has been reviewed.\n    *   Automated tests have been implemented and pass.\n    *   The feature has been demonstrated to the product owner.\n'}

    enhanced_story_prompt = get_dynamic_values("/ai_context", "ENHANCE_USER_STORY_PROMPT", "dev") 
    
    updated_enhanced_story_prompt = replace_placeholders(enhanced_story_prompt, ["[[USER_STORY]]","[[ANALYSIS]]"], [content, story_analysis])
    print("\n\nEnhanced Story Prompt:\n", updated_enhanced_story_prompt)

    suggested_story = get_gemini_response(updated_enhanced_story_prompt)

    story_analysis["suggested_user_story"] = suggested_story


    print("\n\nResponse:\n", story_analysis)
    return jsonify(story_analysis)